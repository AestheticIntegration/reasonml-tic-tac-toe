// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Emotion = require("emotion");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var TicTacToeLogic$ReactTemplate = require("./TicTacToeLogic.bs.js");

var component = ReasonReact.reducerComponent("Example");

function make(onGameFinished, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var label = function (s) {
                if (s !== undefined) {
                  if (s) {
                    return "O";
                  } else {
                    return "X";
                  }
                } else {
                  return "";
                }
              };
              var match = self[/* state */1][/* status */1];
              var disabled;
              disabled = typeof match === "number" ? (
                  match === 0 ? false : true
                ) : (
                  match.tag ? false : true
                );
              var buttonCss = function (b) {
                var base = Emotion.css("display: block; width: 50px; height: 50px; margin: 2px;");
                var match = self[/* state */1][/* status */1];
                if (typeof match === "number" || !(match.tag === 1 && b === match[0])) {
                  return base;
                } else {
                  return base + (" " + Emotion.css("background-color: red"));
                }
              };
              var match$1 = self[/* state */1][/* status */1];
              var overlay;
              overlay = typeof match$1 === "number" ? (
                  match$1 === 0 ? undefined : "-"
                ) : (
                  match$1.tag ? undefined : (
                      match$1[0] ? "O" : "X"
                    )
                );
              var rowCss = Emotion.css("display: flex; flex-direction: row");
              var elems = React.createElement("div", undefined, React.createElement("div", {
                        className: rowCss
                      }, React.createElement("button", {
                            className: buttonCss(/* A */0),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* A */0]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* a */0])), React.createElement("button", {
                            className: buttonCss(/* B */1),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* B */1]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* b */1])), React.createElement("button", {
                            className: buttonCss(/* C */2),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* C */2]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* c */2]))), React.createElement("div", {
                        className: rowCss
                      }, React.createElement("button", {
                            className: buttonCss(/* D */3),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* D */3]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* d */3])), React.createElement("button", {
                            className: buttonCss(/* E */4),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* E */4]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* e */4])), React.createElement("button", {
                            className: buttonCss(/* F */5),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* F */5]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* f */5]))), React.createElement("div", {
                        className: rowCss
                      }, React.createElement("button", {
                            className: buttonCss(/* G */6),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* G */6]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* g */6])), React.createElement("button", {
                            className: buttonCss(/* H */7),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* H */7]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* h */7])), React.createElement("button", {
                            className: buttonCss(/* I */8),
                            disabled: disabled,
                            onClick: (function () {
                                return Curry._1(self[/* send */3], /* Move */[/* I */8]);
                              })
                          }, label(self[/* state */1][/* game */0][/* grid */0][/* i */8]))));
              var sub = overlay !== undefined ? /* array */[
                  elems,
                  React.createElement("div", {
                        className: Emotion.css("position: absolute; top: 0; left: 0; width: 100%; height: 100%; text-align: center; font-size: 150px; display: flex; flex-direction: row; justify-content: space-around;")
                      }, React.createElement("div", {
                            className: Emotion.css("display: flex; flex-direction: column; justify-content: space-around;")
                          }, overlay))
                ] : /* array */[elems];
              return ReactDOMRe.createElementVariadic("div", {
                          className: Emotion.css("position: relative; display: flex;")
                        }, sub);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* game */TicTacToeLogic$ReactTemplate.initial_game,
                      /* status */TicTacToeLogic$ReactTemplate.status(TicTacToeLogic$ReactTemplate.initial_game)
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              var match = TicTacToeLogic$ReactTemplate.play(state[/* game */0], action[0]);
              var status = match[1];
              var newState_000 = /* game */match[0];
              var newState = /* record */[
                newState_000,
                /* status */status
              ];
              var exit = 0;
              if (typeof status === "number") {
                if (status === 0) {
                  return /* Update */Block.__(0, [newState]);
                } else {
                  exit = 1;
                }
              } else if (status.tag) {
                return /* Update */Block.__(0, [newState]);
              } else {
                exit = 1;
              }
              if (exit === 1) {
                return /* UpdateWithSideEffects */Block.__(2, [
                          newState,
                          (function () {
                              return Curry._1(onGameFinished, /* () */0);
                            })
                        ]);
              }
              
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
